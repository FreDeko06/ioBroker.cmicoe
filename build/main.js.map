{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\nimport * as utils from \"@iobroker/adapter-core\";\nimport socket from \"dgram\";\n\ntype Output = {\n\tname: string;\n\tnode: number;\n\tanalog: boolean;\n\toutput: number;\n\tdesc: string;\n\tunit: number;\n\tnodePath?: string;\n};\n\ntype DataType = {\n\tname: string;\n\tsymbol: string;\n\tdecimal: number;\n};\n\nclass Cmicoe extends utils.Adapter {\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"cmicoe\",\n\t\t});\n\t\tthis.sock = socket.createSocket(\"udp4\");\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t\tthis.outputs = [];\n\t\tthis.inputs = [];\n\t}\n\n\tprivate sock: socket.Socket;\n\tprivate socketConnected: boolean = false;\n\n\tprivate outputs: Output[];\n\tprivate inputs: Output[];\n\n\tprivate lastSent: number = 0;\n\tprivate sendInterval: ioBroker.Interval | undefined = undefined;\n\tprivate cmiIP: string = \"\";\n\n\tprivate async onReady(): Promise<void> {\n\t\tawait this.setState(\"info.connection\", false, true);\n\n\t\tif (this.config.nodes != \"\" && (this.config.outputs == undefined || this.config.outputs.length == 0)) {\n\t\t\tthis.log.info(\"Converting old nodes string to new object...\");\n\t\t\tthis.convertNodeString();\n\t\t}\n\n\t\tthis.setupIOs();\n\n\t\tawait this.updateStates();\n\n\t\tthis.cmiIP = this.config.cmiIP;\n\t\tif (this.cmiIP == \"\") {\n\t\t\tthis.log.error(\"IP of cmi not specified! Cannot send!\");\n\t\t}\n\n\t\tif (this.config.bind == \"\") {\n\t\t\tthis.log.error(\"No bind ip specified. Cannot listen!\");\n\t\t} else {\n\t\t\tthis.initSocket();\n\t\t}\n\t\tlet interval = this.config.sendInterval * 1000;\n\t\tif (interval <= 0 || interval > 0xffffffff) {\n\t\t\tthis.log.warn(\n\t\t\t\t`interval must be in range 1 <= interval <= ${0xffffffff} (got ${interval}). Using default 60000 ms`,\n\t\t\t);\n\t\t\tinterval = 60000;\n\t\t}\n\n\t\tthis.sendInterval = this.setInterval(() => {\n\t\t\tthis.sendOutputs()\n\t\t\t\t.then()\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tthis.log.error(`error sending outputs: ${e}`);\n\t\t\t\t});\n\t\t}, interval);\n\t\tawait this.sendOutputs();\n\t}\n\n\tprivate setupIOs(): void {\n\t\tif (this.config.outputs == undefined) {\n\t\t\tthis.config.outputs = [];\n\t\t}\n\t\tif (this.config.inputs == undefined) {\n\t\t\tthis.config.inputs = [];\n\t\t}\n\t\tthis.config.outputs.forEach((o: Output) => {\n\t\t\to.nodePath = `out.node${o.node}.${o.analog ? \"a\" : \"d\"}${o.output}_${o.name}`;\n\t\t\to.name = o.name.replaceAll(this.FORBIDDEN_CHARS, \"_\");\n\t\t\tif (!(o.unit in this.dataTypes)) {\n\t\t\t\to.unit = 0;\n\t\t\t}\n\t\t\tthis.outputs.push(o);\n\t\t});\n\t\tthis.config.inputs.forEach((i) => {\n\t\t\ti.nodePath = `in.node${i.node}.${i.analog ? \"a\" : \"d\"}${i.output}_${i.name}`;\n\t\t\ti.name = i.name.replaceAll(this.FORBIDDEN_CHARS, \"_\");\n\t\t\tif (!(i.unit in this.dataTypes)) {\n\t\t\t\ti.unit = 0;\n\t\t\t}\n\t\t\tthis.inputs.push(i);\n\t\t});\n\t}\n\n\tprivate convertNodeString(): void {\n\t\tthis.config.outputs = [];\n\t\ttry {\n\t\t\tconst outputs = this.config.nodes.split(\",\");\n\t\t\tfor (let idx = 0; idx < outputs.length; idx++) {\n\t\t\t\tconst output = outputs[idx];\n\t\t\t\tif (output == \"\") {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst regex = /^(\\d+)\\/(\\w)(\\d+)$/;\n\t\t\t\tconst matches: RegExpMatchArray | null = output.match(regex);\n\t\t\t\tif (matches == null) {\n\t\t\t\t\tthis.log.warn(`output configuration \"${output}\" has wrong format (no match)!`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet digital = false;\n\t\t\t\tif (matches[2].toLowerCase() == \"d\") {\n\t\t\t\t\tdigital = true;\n\t\t\t\t} else if (matches[2].toLowerCase() == \"a\") {\n\t\t\t\t\tdigital = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.log.warn(`configurated node ${output} has wrong format!`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst out: Output = {\n\t\t\t\t\tnode: parseInt(matches[1]),\n\t\t\t\t\toutput: parseInt(matches[3]),\n\t\t\t\t\tanalog: !digital,\n\t\t\t\t\tdesc: \"\",\n\t\t\t\t\tname: \"\",\n\t\t\t\t\tunit: 0,\n\t\t\t\t};\n\t\t\t\tthis.config.outputs.push(out);\n\t\t\t}\n\t\t\tthis.log.info(\"Converting successful\");\n\t\t} catch {\n\t\t\tthis.log.error(\"Nodes setting has the wrong format! Converting failed.\");\n\t\t}\n\t\tthis.config.nodes = \"\";\n\t\tthis.updateConfig(this.config)\n\t\t\t.then()\n\t\t\t.catch((e) => this.log.error(`Failed to convert node string: ${e}`));\n\t}\n\n\tprivate async updateStates(): Promise<void> {\n\t\tawait this.delUnusedNodes();\n\t\tawait this.createStates(this.outputs, \"out\");\n\t\tawait this.createStates(this.inputs, \"in\");\n\t}\n\n\tprivate initSocket(): void {\n\t\tthis.sock.on(\"message\", (msg: Buffer, rinfo: socket.RemoteInfo) => {\n\t\t\tthis.coeReceived(msg, rinfo);\n\t\t});\n\t\tthis.sock.on(\"close\", () => {\n\t\t\tthis.log.debug(\"socket closed\");\n\t\t});\n\t\tthis.sock.on(\"listening\", () => {\n\t\t\tconst addr = this.sock.address();\n\t\t\tthis.log.debug(`socket listening on ${addr.address}:${addr.port}`);\n\t\t\tvoid this.setState(\"info.connection\", true, true);\n\t\t\tthis.socketConnected = true;\n\t\t});\n\t\tthis.sock.on(\"error\", (err) => {\n\t\t\tthis.log.error(`socket error: ${err}`);\n\t\t\tif (err.message.includes(\"EADDRINUSE\")) {\n\t\t\t\tthis.log.error(\n\t\t\t\t\t\"this could be caused by another instance of this adapter running. Make sure to only start one instance of this adapter.\",\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tthis.sock.bind(this.config.port, this.config.bind);\n\t}\n\n\tprivate async delUnusedNodes(): Promise<void> {\n\t\tconst objs = await this.getAdapterObjectsAsync();\n\t\tfor (const id in objs) {\n\t\t\tif (id.endsWith(\"info.connection\")) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst obj = objs[id];\n\t\t\tif (id.startsWith(`cmicoe.${this.instance}.in`) && obj.type == \"state\") {\n\t\t\t\tconst output: Output | null = this.inputFromId(id);\n\t\t\t\tif (output == null) {\n\t\t\t\t\tthis.log.warn(`state ${id} is no longer used. Deleting...`);\n\t\t\t\t\tawait this.delObjectAsync(id);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (id.startsWith(`cmicoe.${this.instance}.out`) && obj.type == \"state\") {\n\t\t\t\tconst output: Output | null = this.outputFromId(id);\n\t\t\t\tif (output == null) {\n\t\t\t\t\tthis.log.warn(`state ${id} is no longer used. Deleting...`);\n\t\t\t\t\tawait this.delObjectAsync(id);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (obj.type == \"channel\") {\n\t\t\t\tif (obj.common.name == undefined || !JSON.stringify(obj.common.name).startsWith(\"Node\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst node = Number(JSON.stringify(obj.common.name).substring(\"Node \".length));\n\t\t\t\tif (isNaN(node)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tid.startsWith(`cmicoe.${this.instance}.in.`) &&\n\t\t\t\t\t!this.inputs.some((out: Output) => out.node == node)\n\t\t\t\t) {\n\t\t\t\t\tawait this.delObjectAsync(id);\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tid.startsWith(`cmicoe.${this.instance}.out.`) &&\n\t\t\t\t\t!this.outputs.some((out: Output) => out.node == node)\n\t\t\t\t) {\n\t\t\t\t\tawait this.delObjectAsync(id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async createStates(ios: Output[], type: string): Promise<void> {\n\t\tfor (let idx = 0; idx < ios.length; idx++) {\n\t\t\tconst output = ios[idx];\n\t\t\tconst id = `${type}.node${output.node}.${output.analog ? \"a\" : \"d\"}${output.output}_${output.name}`;\n\t\t\tconst nodeChannel = `${type}.node${output.node}`;\n\t\t\tconst nodeObj: ioBroker.Object = {\n\t\t\t\ttype: \"channel\",\n\t\t\t\tcommon: {\n\t\t\t\t\tname: `Node ${output.node}`,\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t\t_id: nodeChannel,\n\t\t\t};\n\t\t\tawait this.setObjectNotExistsAsync(nodeChannel, nodeObj);\n\n\t\t\tconst obj: ioBroker.StateObject = {\n\t\t\t\ttype: \"state\",\n\t\t\t\tcommon: {\n\t\t\t\t\ttype: output.analog ? \"number\" : \"boolean\",\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: true,\n\t\t\t\t\trole: \"value\",\n\t\t\t\t\tname: output.desc,\n\t\t\t\t\tdef: output.analog ? 0 : false,\n\t\t\t\t\tunit: this.dataTypes[output.unit].symbol,\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t\t_id: id,\n\t\t\t};\n\t\t\tthis.log.debug(`creating state with id ${id}...`);\n\t\t\tawait this.setObjectNotExistsAsync(id, obj);\n\t\t}\n\t\tif (this.config.sendOnChange && type == \"out\") {\n\t\t\tthis.log.debug(`subscribing to states`);\n\t\t\tthis.subscribeStates(\"out.node*\");\n\t\t}\n\t}\n\n\tprivate timeout: boolean = false;\n\n\tprivate async sendOutputs(): Promise<void> {\n\t\tif (this.cmiIP == \"\") {\n\t\t\treturn;\n\t\t}\n\t\tif (this.lastSent > Date.now() + 1.8e6) {\n\t\t\tif (!this.timeout) {\n\t\t\t\tthis.setStateChanged(\"timeout\", true, true);\n\t\t\t\tthis.setStateChanged(\"info.connection\", false, true);\n\t\t\t\tthis.timeout = true;\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.timeout) {\n\t\t\t\tthis.setStateChanged(\"timeout\", false, true);\n\t\t\t\tif (this.socketConnected) {\n\t\t\t\t\tthis.setStateChanged(\"info.connection\", true, true);\n\t\t\t\t}\n\t\t\t\tthis.timeout = false;\n\t\t\t}\n\t\t}\n\n\t\tlet outputsLeft = this.outputs.slice();\n\t\twhile (outputsLeft.length > 0) {\n\t\t\tconst output = outputsLeft[0];\n\t\t\t// get all outputs that can be sent in the same packet\n\t\t\tconst allOutputs = outputsLeft.filter((o) => o.node == output.node && o.analog == output.analog);\n\t\t\t// take a maximum of 4 of them\n\t\t\tconst outputsToSend = allOutputs.slice(0, Math.min(4, allOutputs.length));\n\n\t\t\t// remove these from the outputsLeft list\n\t\t\toutputsLeft = outputsLeft.filter((out) => {\n\t\t\t\treturn !outputsToSend.some(\n\t\t\t\t\t(o) => o.analog == out.analog && o.node == out.node && o.output == out.output,\n\t\t\t\t);\n\t\t\t});\n\n\t\t\t// get the values\n\t\t\tconst values = await Promise.all(\n\t\t\t\toutputsToSend.map(async (out) => {\n\t\t\t\t\tconst id = out.nodePath!;\n\t\t\t\t\tconst state = await this.getStateAsync(id);\n\t\t\t\t\tif (!state) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\treturn (state.val as number) * 10 ** this.dataTypes[out.unit].decimal;\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\t// remove the null values\n\t\t\tlet index = values.findIndex((s) => s == null);\n\t\t\twhile (index != -1) {\n\t\t\t\tvalues.splice(index, 1);\n\t\t\t\toutputsToSend.splice(index, 1);\n\n\t\t\t\tindex = values.findIndex((s) => s == null);\n\t\t\t}\n\n\t\t\t// send\n\t\t\tthis.sendMultipleOutputs(outputsToSend, values as number[]);\n\t\t}\n\t}\n\n\tprivate sendMultipleOutputs(outputs: Output[], values: number[]): void {\n\t\tconst buffer = Buffer.alloc(4 + 8 * outputs.length);\n\t\tbuffer[0] = 2;\n\t\tbuffer[1] = 0;\n\t\tbuffer[2] = 4 + 8 * outputs.length;\n\t\tbuffer[3] = outputs.length;\n\n\t\tfor (let i = 0; i < outputs.length; i++) {\n\t\t\tconst output = outputs[i];\n\t\t\tbuffer[4 + 8 * i + 0] = output.node;\n\t\t\tbuffer[4 + 8 * i + 1] = output.output - 1;\n\t\t\tbuffer[4 + 8 * i + 2] = output.analog ? 1 : 0;\n\t\t\tbuffer[4 + 8 * i + 3] = output.analog ? output.unit : 0x2b;\n\t\t\tconst value = values[i] >>> 0;\n\t\t\tbuffer.writeUInt32LE(value, 4 + 8 * i + 4);\n\t\t}\n\n\t\tthis.log.debug(`sending ${buffer.toString(\"hex\")} to ${this.cmiIP}:${this.config.cmiPort}...`);\n\n\t\tthis.sock.send(buffer, this.config.cmiPort, this.config.cmiIP, (err) => {\n\t\t\tif (err != null) {\n\t\t\t\tthis.log.error(`error sending: ${err}`);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate sendState(output: Output, id: string, state: ioBroker.State): void {\n\t\tif (state.val == null) {\n\t\t\tthis.log.warn(`cannot send null value (${id})`);\n\t\t\treturn;\n\t\t}\n\t\tconst success = this.send(\n\t\t\toutput.node,\n\t\t\toutput.output,\n\t\t\toutput.analog ? output.unit : 0x2b,\n\t\t\toutput.analog\n\t\t\t\t? Math.trunc((state.val as number) * 10 ** this.dataTypes[output.unit].decimal)\n\t\t\t\t: state.val\n\t\t\t\t\t? 1\n\t\t\t\t\t: 0,\n\t\t);\n\t\tif (success) {\n\t\t\tvoid this.setState(id, state.val, success);\n\t\t}\n\t}\n\n\tprivate coeReceived(msg: Buffer, rinfo: socket.RemoteInfo): void {\n\t\tthis.lastSent = Date.now();\n\t\tthis.log.debug(`received ${msg.toString(\"hex\")} from ${rinfo.address}`);\n\t\tvoid this.handlePacket(msg);\n\t}\n\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\tif (this.sendInterval) {\n\t\t\t\tthis.clearInterval(this.sendInterval);\n\t\t\t}\n\t\t\tthis.sock.close();\n\t\t\tthis.unsubscribeStates(\"*\");\n\n\t\t\tcallback();\n\t\t} catch {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\tprivate outputFromId(id: string): Output | null {\n\t\treturn this.outputs.find((output) => id.endsWith(output.nodePath!)) || null;\n\t}\n\n\tprivate inputFromId(id: string): Output | null {\n\t\treturn this.inputs.find((input) => id.endsWith(input.nodePath!)) || null;\n\t}\n\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\tif (state.ack) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst output = this.outputFromId(id);\n\t\t\tif (output == null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.sendState(output, id, state);\n\t\t}\n\t}\n\n\t// data types from https://fci.ta.co.at/docu/developer\n\tprivate dataTypes: { [id: number]: DataType } = {\n\t\t0: { symbol: \"\", name: \"Dimensionless\", decimal: 0 },\n\t\t1: { symbol: \"\u00B0C\", name: \"Temperature \u00B0C\", decimal: 1 },\n\t\t2: { symbol: \"W/m\u00B2\", name: \"Solar radiation\", decimal: 0 },\n\t\t3: { symbol: \"l/h\", name: \"Flow rate l/h\", decimal: 0 },\n\t\t4: { symbol: \"s\", name: \"Seconds\", decimal: 0 },\n\t\t5: { symbol: \"min\", name: \"Minutes\", decimal: 0 },\n\t\t8: { symbol: \"%\", name: \"Percent\", decimal: 1 },\n\t\t10: { symbol: \"kW\", name: \"Output kW\", decimal: 2 },\n\t\t11: { symbol: \"kWh\", name: \"Energy kWh\", decimal: 1 },\n\t\t12: { symbol: \"MWh\", name: \"Energy MWh\", decimal: 0 },\n\t\t13: { symbol: \"V\", name: \"Voltage\", decimal: 2 },\n\t\t14: { symbol: \"mA\", name: \"Amperage mA\", decimal: 1 },\n\t\t15: { symbol: \"hr\", name: \"Hours\", decimal: 0 },\n\t\t16: { symbol: \"days\", name: \"Days\", decimal: 0 },\n\t\t17: { symbol: \"pulses\", name: \"Number of pulses\", decimal: 0 },\n\t\t18: { symbol: \"k\u2126\", name: \"Resistance\", decimal: 2 },\n\t\t19: { symbol: \"l\", name: \"Litres\", decimal: 0 },\n\t\t20: { symbol: \"km/h\", name: \"Speed km/h\", decimal: 0 },\n\t\t21: { symbol: \"Hz\", name: \"Frequency\", decimal: 2 },\n\t\t22: { symbol: \"l/min\", name: \"Flow rate l/min\", decimal: 0 },\n\t\t23: { symbol: \"bar\", name: \"Pressure bar\", decimal: 2 },\n\t\t24: { symbol: \"\", name: \"Performance factor | Dimesionless (.2)\", decimal: 2 },\n\t\t26: { symbol: \"m\", name: \"Length m\", decimal: 1 },\n\t\t27: { symbol: \"mm\", name: \"Length mm\", decimal: 1 },\n\t\t28: { symbol: \"m\u00B3\", name: \"Cubic metres\", decimal: 0 },\n\t\t35: { symbol: \"l/d\", name: \"Flow rate l/d\", decimal: 0 },\n\t\t36: { symbol: \"m/s\", name: \"Speed m/s\", decimal: 0 },\n\t\t37: { symbol: \"m\u00B3/min\", name: \"Flow rate m\u00B3/min\", decimal: 0 },\n\t\t38: { symbol: \"m\u00B3/h\", name: \"Flow rate m\u00B3/h\", decimal: 0 },\n\t\t39: { symbol: \"m\u00B3/d\", name: \"Flow rate m\u00B3/d\", decimal: 0 },\n\t\t50: { symbol: \"\u20AC\", name: \"Euro\", decimal: 2 },\n\t\t51: { symbol: \"$\", name: \"Dollar\", decimal: 2 },\n\t\t52: { symbol: \"g/m\u00B3\", name: \"Absolute humidity\", decimal: 1 },\n\t\t53: { symbol: \"\", name: \"Dimensionless (.5)\", decimal: 5 },\n\t\t54: { symbol: \"\u00B0\", name: \"Degree (angle)\", decimal: 1 },\n\t\t58: { symbol: \"\", name: \"Dimensionless (.1)\", decimal: 1 },\n\t\t60: { symbol: \"\", name: \"Time in minutes\", decimal: 0 },\n\t\t63: { symbol: \"A\", name: \"Amperage\", decimal: 1 },\n\t\t65: { symbol: \"mbar\", name: \"Pressure mbar\", decimal: 1 },\n\t\t66: { symbol: \"Pa\", name: \"Pressure Pa\", decimal: 0 },\n\t\t67: { symbol: \"ppm\", name: \"CO2 content (ppm)\", decimal: 0 },\n\t\t69: { symbol: \"W\", name: \"Output W\", decimal: 0 },\n\t\t70: { symbol: \"t\", name: \"Weight t\", decimal: 2 },\n\t\t71: { symbol: \"kg\", name: \"Weight kg\", decimal: 1 },\n\t\t72: { symbol: \"g\", name: \"Weight g\", decimal: 1 },\n\t\t73: { symbol: \"cm\", name: \"Length cm\", decimal: 1 },\n\t\t76: { symbol: \"Bq/m\u00B3\", name: \"Radon concentration\", decimal: 0 },\n\t\t77: { symbol: \"ct/kWh\", name: \"Price ct/kWh\", decimal: 3 },\n\t};\n\n\tprivate async handlePacket(packet: Buffer): Promise<void> {\n\t\tif (packet.readUint8() != 2) {\n\t\t\tthis.log.warn(`invalid packet received. Cannot handle: ${packet.toString(\"hex\")}`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst length = packet.readUInt8(2);\n\t\tconst messageCount = packet.readUint8(3);\n\n\t\tif (length != 4 + messageCount * 8) {\n\t\t\tthis.log.warn(`invalid packet received. Cannot handle: ${packet.toString(\"hex\")}`);\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let i = 0; i < messageCount; i++) {\n\t\t\tconst nodeID = packet.readUint8(8 * i + 4);\n\t\t\tconst outID = packet.readUint8(8 * i + 5) + 1;\n\t\t\tconst digital: boolean = packet.readUint8(8 * i + 6) == 0;\n\t\t\tconst dataType = packet.readUint8(8 * i + 7);\n\t\t\tconst data = packet.readInt32LE(8 * i + 8);\n\n\t\t\tlet typ = \"(unknown)\";\n\t\t\tif (dataType in this.dataTypes) {\n\t\t\t\ttyp = this.dataTypes[dataType].name;\n\t\t\t}\n\n\t\t\tthis.log.debug(`received data from node ${nodeID}/${outID}: ${data} ${typ}`);\n\n\t\t\tif (!this.isInputCreated(nodeID, digital, outID)) {\n\t\t\t\tthis.log.warn(`Received from ${nodeID}/${digital ? \"d\" : \"a\"}${outID}, but there is no input created`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst input = this.inputs.find((i) => i.node == nodeID && i.analog == !digital && i.output == outID)!;\n\n\t\t\tif (input.unit != dataType && input.analog) {\n\t\t\t\tthis.log.warn(\n\t\t\t\t\t`${input.node}/a${input.output} has wrong unit (received \"${typ}\" but input is configured as \"${this.dataTypes[input.unit].name}\")`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst id = input.nodePath!;\n\t\t\tawait this.setState(\n\t\t\t\tid,\n\t\t\t\tdigital ? (data == 1 ? true : false) : data / 10 ** this.dataTypes[input.unit].decimal,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate isInputCreated(nodeID: number, digital: boolean, outID: number): boolean {\n\t\treturn this.inputs.some((i) => i.node == nodeID && i.analog == !digital && i.output == outID);\n\t}\n\n\tprivate send(nodeID: number, outID: number, dataType: number, data: number): boolean {\n\t\tif (this.cmiIP == \"\") {\n\t\t\treturn false;\n\t\t}\n\t\tif (nodeID > 255 || nodeID < 0) {\n\t\t\tthis.log.warn(`NodeID has to be between 0 and 255 (got ${nodeID})!`);\n\t\t\treturn false;\n\t\t}\n\t\tif (outID <= 0) {\n\t\t\tthis.log.warn(`Output ID has to be greater than 0 (got ${outID})!`);\n\t\t\treturn false;\n\t\t}\n\t\tconst array = new Uint8Array(8);\n\t\tarray[0] = 2;\n\t\tarray[1] = 0;\n\t\tarray[2] = 12;\n\t\tarray[3] = 1;\n\t\tarray[4] = nodeID;\n\t\tarray[5] = outID - 1;\n\t\tarray[6] = dataType == 0x2b ? 0 : 1;\n\t\tarray[7] = dataType;\n\n\t\tconst buffer = Buffer.alloc(12);\n\t\tbuffer.fill(array);\n\n\t\t// convert negative numbers and short to 4 bytes\n\t\tdata = data >>> 0;\n\n\t\tbuffer.writeUint32LE(data, 8);\n\n\t\tthis.log.debug(`sending ${buffer.toString(\"hex\")} to ${this.cmiIP}:${this.config.cmiPort}`);\n\t\tthis.sock.send(buffer, this.config.cmiPort, this.cmiIP, (err) => {\n\t\t\tif (err != null) {\n\t\t\t\tthis.log.error(`error sending: ${err}`);\n\t\t\t}\n\t\t});\n\t\treturn true;\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Cmicoe(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Cmicoe())();\n}\n"],
  "mappings": "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",
  "names": ["socket", "i"]
}
