{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\nimport * as utils from \"@iobroker/adapter-core\";\nimport socket from \"dgram\";\n\ntype Output = {\n\tnode: number;\n\tanalog: boolean;\n\toutput: number;\n};\n\nclass Cmicoe extends utils.Adapter {\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"cmicoe\",\n\t\t});\n\t\tthis.sock = socket.createSocket(\"udp4\");\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t\tthis.outputs = [];\n\t}\n\n\tprivate sock: socket.Socket;\n\tprivate socketConnected: boolean = false;\n\n\tprivate outputs: Output[];\n\n\tprivate lastSent: number = 0;\n\n\tprivate sendInterval: ioBroker.Interval | undefined = undefined;\n\n\tprivate cmiIP: string = \"\";\n\n\tprivate async onReady(): Promise<void> {\n\t\tthis.setState(\"info.connection\", false, true);\n\n\t\tthis.cmiIP = this.config.cmiIP;\n\t\tif (this.cmiIP == \"\") {\n\t\t\tthis.log.error(\"IP of cmi not specified! Cannot send!\");\n\t\t}\n\n\t\tthis.log.debug(\"config nodes: \" + this.config.nodes);\n\t\ttry {\n\t\t\tconst outputs = this.config.nodes.split(\",\");\n\t\t\tfor (let idx = 0; idx < outputs.length; idx++) {\n\t\t\t\tconst output = outputs[idx];\n\t\t\t\tif (output == \"\") continue;\n\t\t\t\tconst regex = /^(\\d+)\\/(\\w)(\\d+)$/;\n\t\t\t\tconst matches: RegExpMatchArray | null = output.match(regex);\n\t\t\t\tif (matches == null) {\n\t\t\t\t\tthis.log.warn(`output configuration \"${output}\" has wrong format (no match)!`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet digital: boolean = false;\n\t\t\t\tif (matches[2].toLowerCase() == \"d\") digital = true;\n\t\t\t\telse if (matches[2].toLowerCase() == \"a\") digital = false;\n\t\t\t\telse {\n\t\t\t\t\tthis.log.warn(`configurated node ${output} has wrong format!`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst out: Output = {\n\t\t\t\t\tnode: parseInt(matches[1]),\n\t\t\t\t\toutput: parseInt(matches[3]),\n\t\t\t\t\tanalog: !digital,\n\t\t\t\t};\n\t\t\t\tif (!this.outputs.some(o => o.analog == out.analog && o.node == out.node && o.output == out.output))\n\t\t\t\t\tthis.outputs.push(out);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.log.error(\"Nodes setting has the wrong format!\");\n\t\t}\n\n\t\tawait this.delUnusedNodes();\n\n\t\tawait this.createStates();\n\n\t\tif (this.config.bind == \"\") {\n\t\t\tthis.log.error(\"No bind ip specified. Cannot listen!\");\n\t\t} else {\n\t\t\tthis.initSocket();\n\t\t}\n\t\tlet interval = this.config.sendInterval * 1000;\n\t\tif (interval <= 0 || interval > 0xFFFFFFFF) {\n\t\t\tthis.log.warn(`interval must be in range 1 <= interval <= ${0xFFFFFFFF} (got ${interval}). Using default 60000 ms`)\n\t\t\tinterval = 60000;\n\t\t}\n\n\t\tthis.sendInterval = this.setInterval(() => {\n\t\t\ttry {\n\t\t\t\tthis.sendOutputs();\n\t\t\t} catch (e) {\n\t\t\t\tthis.log.error(\"error sending outputs: \" + e);\n\t\t\t}\n\t\t}, interval);\n\t\tawait this.sendOutputs();\n\t}\n\n\tprivate initSocket(): void {\n\t\tthis.sock.on(\"message\", (msg: Buffer, rinfo: socket.RemoteInfo) => {\n\t\t\tthis.coeReceived(msg, rinfo);\n\t\t});\n\t\tthis.sock.on(\"close\", () => {\n\t\t\tthis.log.debug(\"socket closed\");\n\t\t});\n\t\tthis.sock.on(\"listening\", () => {\n\t\t\tconst addr = this.sock.address();\n\t\t\tthis.log.debug(`socket listening on ${addr.address}:${addr.port}`);\n\t\t\tthis.setState(\"info.connection\", true, true);\n\t\t\tthis.socketConnected = true;\n\t\t});\n\t\tthis.sock.on(\"error\", (err) => {\n\t\t\tthis.log.error(`socket error: ${err}`);\n\t\t\tif (err.message.includes(\"EADDRINUSE\")) {\n\t\t\t\tthis.log.error(\n\t\t\t\t\t\"this could be caused by another instance of this adapter running. Make sure to only start one instance of this adapter.\",\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tthis.sock.bind(this.config.port, this.config.bind);\n\t}\n\n\tprivate async delUnusedNodes(): Promise<void> {\n\t\tconst states = await this.getStatesAsync(\"out.*\");\n\t\tfor (const s in states) {\n\t\t\tconst output: Output | null = this.outputFromId(s);\n\t\t\tif (output == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t!this.outputs.some(\n\t\t\t\t\t(o) => o.node == output.node && o.analog == output.analog && output.output == output.output,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.log.warn(`state ${s} is no longer used. Deleting...`);\n\t\t\t\tawait this.delObjectAsync(s);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async createStates(): Promise<void> {\n\t\tfor (let idx = 0; idx < this.outputs.length; idx++) {\n\t\t\tconst output = this.outputs[idx];\n\t\t\tconst id = `out.node${output.node}.${output.analog ? \"analog\" : \"digital\"}${output.output}`;\n\t\t\tconst nodeChannel = `out.node${output.node}`;\n\t\t\tconst nodeObj: ioBroker.Object = {\n\t\t\t\ttype: \"channel\",\n\t\t\t\tcommon: {\n\t\t\t\t\tname: `Node ${output.node}`\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t\t_id: nodeChannel,\n\t\t\t};\n\t\t\tawait this.setObjectNotExistsAsync(nodeChannel, nodeObj);\n\n\t\t\tconst obj: ioBroker.StateObject = {\n\t\t\t\ttype: \"state\",\n\t\t\t\tcommon: {\n\t\t\t\t\ttype: output.analog ? \"number\" : \"boolean\",\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: true,\n\t\t\t\t\trole: \"value\",\n\t\t\t\t\tname: `Output ${output.node}/${output.output}`,\n\t\t\t\t\tdef: output.analog ? 0 : false,\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t\t_id: id,\n\t\t\t};\n\t\t\tthis.log.debug(`creating state with id ${id}...`);\n\t\t\tawait this.setObjectNotExistsAsync(id, obj);\n\t\t}\n\t\tif (this.config.sendOnChange) {\n\t\t\tthis.log.debug(`subscribing to states`);\n\t\t\tthis.subscribeStates(\"out.node*\");\n\t\t}\n\t}\n\n\tprivate timeout: boolean = false;\n\n\tprivate async sendOutputs(): Promise<void> {\n\t\tif (this.lastSent > Date.now() + 1.8e6) {\n\t\t\tif (!this.timeout) {\n\t\t\t\tthis.setStateChanged(\"timeout\", true, true);\n\t\t\t\tthis.setStateChanged(\"info.connection\", false, true);\n\t\t\t\tthis.timeout = true;\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.timeout) {\n\t\t\t\tthis.setStateChanged(\"timeout\", false, true);\n\t\t\t\tif (this.socketConnected) {\n\t\t\t\t\tthis.setStateChanged(\"info.connection\", true, true);\n\t\t\t\t}\n\t\t\t\tthis.timeout = false;\n\t\t\t}\n\t\t}\n\t\tlet outputsLeft = this.outputs.slice();\n\t\twhile (outputsLeft.length > 0) {\n\t\t\tconst output = outputsLeft[0];\n\t\t\t// get all outputs that can be sent in the same packet\n\t\t\tconst allOutputs = outputsLeft.filter(o => o.node == output.node && o.analog == output.analog);\n\t\t\t// take a maximum of 4 of them\n\t\t\tconst outputsToSend = allOutputs.slice(0, Math.min(4, allOutputs.length));\n\n\t\t\t// remove these from the outputsLeft list\n\t\t\toutputsLeft = outputsLeft.filter((out) => {\n\t\t\t\treturn !outputsToSend.some(o => o.analog == out.analog && o.node == out.node && o.output == out.output);\n\t\t\t});\n\n\t\t\t// get the values\n\t\t\tconst values = await Promise.all(outputsToSend.map(async (out) => {\n\t\t\t\tconst id = `out.node${out.node}.${out.analog ? \"analog\" : \"digital\"}${out.output}`;\n\t\t\t\tconst state = await this.getStateAsync(id);\n\t\t\t\tif (!state) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treturn state.val as number;\n\t\t\t}));\n\n\t\t\t// remove the null values\n\t\t\tlet index = values.findIndex((s) => s == null);\n\t\t\twhile (index != -1) {\n\t\t\t\tvalues.splice(index, 1);\n\t\t\t\toutputsToSend.splice(index, 1);\n\n\t\t\t\tindex = values.findIndex((s) => s == null);\n\t\t\t}\n\n\t\t\t// send\n\t\t\tthis.sendMultipleOutputs(outputsToSend, values as number[]);\n\t\t}\n\t}\n\n\tprivate sendMultipleOutputs(outputs: Output[], values: number[]): void {\n\t\tconst buffer = Buffer.alloc(4 + 8 * outputs.length);\n\t\tbuffer[0] = 2;\n\t\tbuffer[1] = 0;\n\t\tbuffer[2] = 4 + 8 * outputs.length;\n\t\tbuffer[3] = outputs.length;\n\n\t\tfor (let i = 0; i < outputs.length; i++) {\n\t\t\tconst output = outputs[i];\n\t\t\tbuffer[4 + 8 * i + 0] = output.node;\n\t\t\tbuffer[4 + 8 * i + 1] = output.output - 1;\n\t\t\tbuffer[4 + 8 * i + 2] = output.analog ? 1 : 0;\n\t\t\tbuffer[4 + 8 * i + 3] = output.analog ? 0x0 : 0x2b;\n\t\t\tlet value = values[i] >>> 0;\n\t\t\tbuffer.writeUInt32LE(value, 4 + 8 * i + 4);\n\t\t}\n\n\t\tthis.log.debug(`sending ${buffer.toString(\"hex\")} to ${this.cmiIP}:${this.config.cmiPort}...`);\n\n\t\tthis.sock.send(buffer, this.config.cmiPort, this.config.cmiIP, (err) => {\n\t\t\tif (err != null) {\n\t\t\t\tthis.log.error(\"error sending: \" + err);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async sendState(output: Output, id: string, state: ioBroker.State): Promise<void> {\n\t\tif (state.val == null) {\n\t\t\tthis.log.warn(`cannot send null value (${id})`);\n\t\t\treturn;\n\t\t}\n\t\tconst success = this.send(\n\t\t\toutput.node,\n\t\t\toutput.output,\n\t\t\toutput.analog ? 0x00 : 0x2b,\n\t\t\toutput.analog ? parseInt(state.val.toString()) : state.val ? 1 : 0,\n\t\t);\n\t\tif (success) {\n\t\t\tthis.setState(id, state.val, success);\n\t\t}\n\t}\n\n\tprivate async sendOutput(output: Output): Promise<void> {\n\t\tconst id = `out.node${output.node}.${output.analog ? \"analog\" : \"digital\"}${output.output}`;\n\t\tconst state = await this.getStateAsync(id);\n\t\tif (!state) {\n\t\t\tthis.log.warn(`state for output ${id} does not exist. Please restart adapter`);\n\t\t\treturn;\n\t\t}\n\t\tawait this.sendState(output, id, state);\n\t}\n\n\tprivate coeReceived(msg: Buffer, rinfo: socket.RemoteInfo): void {\n\t\tthis.lastSent = Date.now();\n\t\tthis.log.debug(`received ${msg.toString(\"hex\")} from ${rinfo.address}`);\n\t\tthis.handlePacket(msg);\n\t}\n\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\tif (this.sendInterval) this.clearInterval(this.sendInterval);\n\t\t\tthis.sock.close();\n\t\t\tthis.unsubscribeStates(\"*\");\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\tprivate outputFromId(id: string): Output | null {\n\t\tconst regex = /node(\\d+).(digital|analog)(\\d+)$/;\n\t\tconst match: RegExpMatchArray | null = id.match(regex);\n\t\tif (match == null) {\n\t\t\tthis.log.warn(`node with wrong id found: ${id}. Skipping`);\n\t\t\treturn null;\n\t\t}\n\t\tconst output: Output = {\n\t\t\tnode: parseInt(match[1]),\n\t\t\toutput: parseInt(match[3]),\n\t\t\tanalog: match[2] == \"analog\",\n\t\t};\n\t\treturn output;\n\t}\n\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\tif (state.ack) return;\n\t\t\tconst output = this.outputFromId(id);\n\t\t\tif (output == null) return;\n\n\t\t\tthis.sendState(output, id, state);\n\t\t}\n\t}\n\n\t// data types adapted from pyton-can-coe (Copyright (c) 2016-2025, Gerrit Beine)\n\t// https://c0d3.sh/smarthome/python-can-coe/src/branch/main/coe/coe.py \n\tprivate dataTypes: { [id: number]: string } = {\n\t\t0: \"\",\n\t\t1: \"\u00B0C\",\n\t\t2: \"W/m\u00B2\",\n\t\t3: \"l/h\",\n\t\t4: \"sec\",\n\t\t5: \"min\",\n\t\t7: \"K\",\n\t\t8: \"%\",\n\t\t9: \"kW\",\n\t\t10: \"MWh\",\n\t\t11: \"kWh\",\n\t\t12: \"V\",\n\t\t13: \"mA\",\n\t\t14: \"h\",\n\t\t15: \"d\",\n\t\t18: \"km/h\",\n\t\t19: \"Hz\",\n\t\t20: \"l/m\",\n\t\t21: \"bar\",\n\t\t43: \"(bool)\",\n\t\t69: \"W\",\n\t};\n\n\tprivate inputs: Output[] = [];\n\n\tprivate async handlePacket(packet: Buffer): Promise<void> {\n\t\tif (packet.readUint8() != 2) {\n\t\t\tthis.log.warn(`invalid packet received. Cannot handle: ${packet.toString(\"hex\")}`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst length = packet.readUInt8(2);\n\t\tconst messageCount = packet.readUint8(3);\n\n\t\tif (length != 4 + messageCount * 8) {\n\t\t\tthis.log.warn(`invalid packet received. Cannot handle: ${packet.toString(\"hex\")}`);\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let i = 0; i < messageCount; i++) {\n\t\t\tconst nodeID = packet.readUint8(8 * i + 4);\n\t\t\tconst outID = packet.readUint8(8 * i + 5) + 1;\n\t\t\tconst digital: boolean = packet.readUint8(8 * i + 6) == 0;\n\t\t\tconst dataType = packet.readUint8(8 * i + 7);\n\t\t\tconst data = packet.readUint32LE(8 * i + 8);\n\n\t\t\tlet typ = \"(unknown)\";\n\t\t\tif (dataType in this.dataTypes) {\n\t\t\t\ttyp = this.dataTypes[dataType];\n\t\t\t}\n\n\t\t\tthis.log.debug(`received data from node ${nodeID}/${outID}: ${data} ${typ}`);\n\n\t\t\tif (!this.isNodeCreated(nodeID)) {\n\t\t\t\tconst nodeChannel = `in.node${nodeID}`;\n\t\t\t\tconst nodeObj: ioBroker.Object = {\n\t\t\t\t\ttype: \"channel\",\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: `Node ${nodeID}`\n\t\t\t\t\t},\n\t\t\t\t\tnative: {},\n\t\t\t\t\t_id: nodeChannel\n\t\t\t\t};\n\t\t\t\tawait this.setObjectNotExistsAsync(nodeChannel, nodeObj);\n\t\t\t}\n\n\t\t\tconst id = \"in.node\" + nodeID + \".\" + (digital ? \"digital\" : \"analog\") + outID;\n\t\t\tconst obj: ioBroker.StateObject = {\n\t\t\t\ttype: \"state\",\n\t\t\t\tcommon: {\n\t\t\t\t\ttype: digital ? \"boolean\" : \"number\",\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t\trole: \"\",\n\t\t\t\t\tname: `Input ${nodeID}/${outID}`,\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t\t_id: id,\n\t\t\t};\n\t\t\tif (!this.inputs.some(i => i.analog != digital && i.node == nodeID && i.output == outID)) {\n\t\t\t\tawait this.setObjectNotExistsAsync(id, obj);\n\t\t\t\tthis.inputs.push({ node: nodeID, output: outID, analog: !digital });\n\t\t\t}\n\t\t\tthis.setState(id, digital ? (data == 1 ? true : false) : data, true);\n\t\t}\n\n\t}\n\n\tprivate isNodeCreated(nodeID: number): boolean {\n\t\tfor (let i = 0; i < this.inputs.length; i++) {\n\t\t\tif (this.inputs[i].node == nodeID) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate send(nodeID: number, outID: number, dataType: number, data: number): boolean {\n\t\tif (this.cmiIP == \"\") return false;\n\t\tif (nodeID > 255 || nodeID < 0) {\n\t\t\tthis.log.warn(`NodeID has to be between 0 and 255 (got ${nodeID})!`);\n\t\t\treturn false;\n\t\t}\n\t\tif (outID <= 0) {\n\t\t\tthis.log.warn(`Output ID has to be greater than 0 (got ${outID})!`);\n\t\t\treturn false;\n\t\t}\n\t\tconst array = new Uint8Array(8);\n\t\tarray[0] = 2;\n\t\tarray[1] = 0;\n\t\tarray[2] = 12;\n\t\tarray[3] = 1;\n\t\tarray[4] = nodeID;\n\t\tarray[5] = outID - 1;\n\t\tarray[6] = dataType == 0x2b ? 0 : 1;\n\t\tarray[7] = dataType;\n\n\t\tconst buffer = Buffer.alloc(12);\n\t\tbuffer.fill(array);\n\n\t\t// convert negative numbers and short to 4 bytes\n\t\tdata = data >>> 0;\n\n\t\tbuffer.writeUint32LE(data, 8);\n\n\t\tthis.log.debug(`sending ${buffer.toString(\"hex\")} to ${this.cmiIP}:${this.config.cmiPort}`);\n\t\tthis.sock.send(buffer, this.config.cmiPort, this.cmiIP, (err) => {\n\t\t\tif (err != null) {\n\t\t\t\tthis.log.error(`error sending: ${err}`);\n\t\t\t}\n\t\t});\n\t\treturn true;\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Cmicoe(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Cmicoe())();\n}\n"],
  "mappings": "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",
  "names": ["socket", "i"]
}
