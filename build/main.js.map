{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\nimport * as utils from '@iobroker/adapter-core';\nimport socket from 'node:dgram';\n\ntype Output = {\n    name: string;\n    node: number;\n    analog: boolean;\n    output: number;\n    desc: string;\n    unit: number;\n    nodePath?: string;\n};\n\ntype DataType = {\n    name: string;\n    symbol: string;\n    decimal: number;\n};\n\nclass Cmicoe extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'cmicoe',\n        });\n        this.sock = socket.createSocket('udp4');\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        this.outputs = [];\n        this.inputs = [];\n    }\n\n    private sock: socket.Socket;\n    private socketConnected: boolean = false;\n\n    private outputs: Output[];\n    private inputs: Output[];\n\n    private lastSent: number = 0;\n    private sendInterval: ioBroker.Interval | undefined = undefined;\n    private cmiIP: string = '';\n\n    private async onReady(): Promise<void> {\n        await this.setState('info.connection', false, true);\n\n        if (this.config.nodes != '' && (this.config.outputs == undefined || this.config.outputs.length == 0)) {\n            this.log.info('Converting old nodes string to new object...');\n            this.convertNodeString();\n        }\n\n        this.setupIOs();\n\n        await this.updateStates();\n\n        this.cmiIP = this.config.cmiIP;\n        if (this.cmiIP == '') {\n            this.log.error('IP of cmi not specified! Cannot send!');\n        }\n\n        if (this.config.bind == '') {\n            this.log.error('No bind ip specified. Cannot listen!');\n        } else {\n            this.initSocket();\n        }\n        let interval = this.config.sendInterval * 1000;\n        if (interval <= 0 || interval > 86400000) {\n            this.log.warn(\n                `interval must be in range 1 <= interval <= 86400000 (got ${interval}). Using default 60000 ms`,\n            );\n            interval = 60000;\n        }\n\n        this.sendInterval = this.setInterval(() => {\n            this.sendOutputs()\n                .then()\n                .catch(e => {\n                    this.log.error(`error sending outputs: ${e}`);\n                });\n        }, interval);\n        await this.sendOutputs();\n    }\n\n    private setupIOs(): void {\n        if (this.config.outputs == undefined) {\n            this.config.outputs = [];\n        }\n        if (this.config.inputs == undefined) {\n            this.config.inputs = [];\n        }\n        this.config.outputs.forEach((o: Output) => {\n            o.nodePath = `out.node${o.node}.${o.analog ? 'a' : 'd'}${o.output}_${o.name}`;\n            o.nodePath = o.nodePath.replaceAll(/[^a-zA-Z0-9_-]/g, '_');\n            if (!(o.unit in this.dataTypes)) {\n                o.unit = 0;\n            }\n            this.outputs.push(o);\n        });\n        this.config.inputs.forEach(i => {\n            i.nodePath = `in.node${i.node}.${i.analog ? 'a' : 'd'}${i.output}_${i.name}`;\n            i.nodePath = i.nodePath.replaceAll(/[^a-zA-Z0-9_-]/g, '_');\n            if (!(i.unit in this.dataTypes)) {\n                i.unit = 0;\n            }\n            this.inputs.push(i);\n        });\n    }\n\n    private convertNodeString(): void {\n        this.config.outputs = [];\n        try {\n            const outputs = this.config.nodes.split(',');\n            for (let idx = 0; idx < outputs.length; idx++) {\n                const output = outputs[idx];\n                if (output == '') {\n                    continue;\n                }\n                const regex = /^(\\d+)\\/(\\w)(\\d+)$/;\n                const matches: RegExpMatchArray | null = output.match(regex);\n                if (matches == null) {\n                    this.log.warn(`output configuration \"${output}\" has wrong format (no match)!`);\n                    continue;\n                }\n                let digital = false;\n                if (matches[2].toLowerCase() == 'd') {\n                    digital = true;\n                } else if (matches[2].toLowerCase() == 'a') {\n                    digital = false;\n                } else {\n                    this.log.warn(`configurated node ${output} has wrong format!`);\n                    continue;\n                }\n                const out: Output = {\n                    node: parseInt(matches[1]),\n                    output: parseInt(matches[3]),\n                    analog: !digital,\n                    desc: '',\n                    name: '',\n                    unit: 0,\n                };\n                this.config.outputs.push(out);\n            }\n            this.log.info('Converting successful');\n        } catch {\n            this.log.error('Nodes setting has the wrong format! Converting failed.');\n        }\n        this.config.nodes = '';\n        this.updateConfig(this.config)\n            .then()\n            .catch(e => this.log.error(`Failed to convert node string: ${e}`));\n    }\n\n    private async updateStates(): Promise<void> {\n        await this.delUnusedNodes();\n        await this.createStates(this.outputs, 'out');\n        await this.createStates(this.inputs, 'in');\n    }\n\n    private initSocket(): void {\n        this.sock.on('message', (msg: Buffer, rinfo: socket.RemoteInfo) => {\n            this.coeReceived(msg, rinfo);\n        });\n        this.sock.on('close', () => {\n            this.log.debug('socket closed');\n        });\n        this.sock.on('listening', () => {\n            const addr = this.sock.address();\n            this.log.debug(`socket listening on ${addr.address}:${addr.port}`);\n            void this.setState('info.connection', true, true);\n            this.socketConnected = true;\n        });\n        this.sock.on('error', err => {\n            this.log.error(`socket error: ${err}`);\n            if (err.message.includes('EADDRINUSE')) {\n                this.log.error(\n                    'this could be caused by another instance of this adapter running. Make sure to only start one instance of this adapter.',\n                );\n            }\n        });\n\n        this.sock.bind(this.config.port, this.config.bind);\n    }\n\n    private async delUnusedNodes(): Promise<void> {\n        const objs = await this.getAdapterObjectsAsync();\n        for (const id in objs) {\n            if (id.endsWith('info.connection')) {\n                continue;\n            }\n            const obj = objs[id];\n            if (id.startsWith(`cmicoe.${this.instance}.in`) && obj.type == 'state') {\n                const output: Output | null = this.inputFromId(id);\n                if (output == null) {\n                    this.log.warn(`state ${id} is no longer used. Deleting...`);\n                    await this.delObjectAsync(id);\n                    continue;\n                }\n            }\n\n            if (id.startsWith(`cmicoe.${this.instance}.out`) && obj.type == 'state') {\n                const output: Output | null = this.outputFromId(id);\n                if (output == null) {\n                    this.log.warn(`state ${id} is no longer used. Deleting...`);\n                    await this.delObjectAsync(id);\n                    continue;\n                }\n            }\n\n            if (obj.type == 'channel') {\n                if (obj.common.name == undefined || !JSON.stringify(obj.common.name).startsWith('\"Node')) {\n                    continue;\n                }\n                const node = Number(JSON.stringify(obj.common.name).replaceAll('\"', '').substring('Node '.length));\n                if (isNaN(node)) {\n                    continue;\n                }\n                if (\n                    id.startsWith(`cmicoe.${this.instance}.in.`) &&\n                    !this.inputs.some((out: Output) => out.node == node)\n                ) {\n                    await this.delObjectAsync(id);\n                }\n                if (\n                    id.startsWith(`cmicoe.${this.instance}.out.`) &&\n                    !this.outputs.some((out: Output) => out.node == node)\n                ) {\n                    await this.delObjectAsync(id);\n                }\n            }\n        }\n    }\n\n    private getRole(io: Output, type: string): string {\n        if (type == 'out') {\n            if (io.analog) {\n                return 'level';\n            }\n            return 'switch';\n        }\n        if (io.analog) {\n            return 'value';\n        }\n        return 'indicator';\n    }\n\n    private async createStates(ios: Output[], type: string): Promise<void> {\n        for (let idx = 0; idx < ios.length; idx++) {\n            const output = ios[idx];\n            const id = `${type}.node${output.node}.${output.analog ? 'a' : 'd'}${output.output}_${output.name}`;\n            const nodeChannel = `${type}.node${output.node}`;\n            const nodeObj: ioBroker.Object = {\n                type: 'channel',\n                common: {\n                    name: `Node ${output.node}`,\n                },\n                native: {},\n                _id: nodeChannel,\n            };\n            await this.setObjectNotExistsAsync(nodeChannel, nodeObj);\n\n            const obj: ioBroker.StateObject = {\n                type: 'state',\n                common: {\n                    type: output.analog ? 'number' : 'boolean',\n                    read: true,\n                    write: type == \"out\",\n                    role: this.getRole(output, type),\n                    name: output.desc,\n                    def: output.analog ? 0 : false,\n                    unit: this.dataTypes[output.unit].symbol,\n                },\n                native: {},\n                _id: id,\n            };\n            this.log.debug(`creating state with id ${id}...`);\n            await this.setObjectNotExistsAsync(id, obj);\n        }\n        if (this.config.sendOnChange && type == 'out') {\n            this.log.debug(`subscribing to states`);\n            this.subscribeStates('out.node*');\n        }\n    }\n\n    private timeout: boolean = false;\n\n    private async sendOutputs(): Promise<void> {\n        if (this.cmiIP == '') {\n            return;\n        }\n        if (this.lastSent > Date.now() + 1.8e6) {\n            if (!this.timeout) {\n                this.setStateChanged('timeout', true, true);\n                this.setStateChanged('info.connection', false, true);\n                this.timeout = true;\n            }\n        } else {\n            if (this.timeout) {\n                this.setStateChanged('timeout', false, true);\n                if (this.socketConnected) {\n                    this.setStateChanged('info.connection', true, true);\n                }\n                this.timeout = false;\n            }\n        }\n\n        let outputsLeft = this.outputs.slice();\n        while (outputsLeft.length > 0) {\n            const output = outputsLeft[0];\n            // get all outputs that can be sent in the same packet\n            const allOutputs = outputsLeft.filter(o => o.node == output.node && o.analog == output.analog);\n            // take a maximum of 4 of them\n            const outputsToSend = allOutputs.slice(0, Math.min(4, allOutputs.length));\n\n            // remove these from the outputsLeft list\n            outputsLeft = outputsLeft.filter(out => {\n                return !outputsToSend.some(o => o.analog == out.analog && o.node == out.node && o.output == out.output);\n            });\n\n            // get the values\n            const values = await Promise.all(\n                outputsToSend.map(async out => {\n                    const id = out.nodePath!;\n                    const state = await this.getStateAsync(id);\n                    if (!state) {\n                        return null;\n                    }\n                    return (state.val as number) * 10 ** this.dataTypes[out.unit].decimal;\n                }),\n            );\n\n            // remove the null values\n            let index = values.findIndex(s => s == null);\n            while (index != -1) {\n                values.splice(index, 1);\n                outputsToSend.splice(index, 1);\n\n                index = values.findIndex(s => s == null);\n            }\n\n            // send\n            this.sendMultipleOutputs(outputsToSend, values as number[]);\n        }\n    }\n\n    private sendMultipleOutputs(outputs: Output[], values: number[]): void {\n        const buffer = Buffer.alloc(4 + 8 * outputs.length);\n        buffer[0] = 2;\n        buffer[1] = 0;\n        buffer[2] = 4 + 8 * outputs.length;\n        buffer[3] = outputs.length;\n\n        for (let i = 0; i < outputs.length; i++) {\n            const output = outputs[i];\n            buffer[4 + 8 * i + 0] = output.node;\n            buffer[4 + 8 * i + 1] = output.output - 1;\n            buffer[4 + 8 * i + 2] = output.analog ? 1 : 0;\n            buffer[4 + 8 * i + 3] = output.analog ? output.unit : 0x2b;\n            const value = values[i] >>> 0;\n            buffer.writeUInt32LE(value, 4 + 8 * i + 4);\n        }\n\n        this.log.debug(`sending ${buffer.toString('hex')} to ${this.cmiIP}:${this.config.cmiPort}...`);\n\n        this.sock.send(buffer, this.config.cmiPort, this.config.cmiIP, err => {\n            if (err != null) {\n                this.log.error(`error sending: ${err}`);\n            }\n        });\n    }\n\n    private sendState(output: Output, id: string, state: ioBroker.State): void {\n        if (state.val == null) {\n            this.log.warn(`cannot send null value (${id})`);\n            return;\n        }\n        const success = this.send(\n            output.node,\n            output.output,\n            output.analog ? output.unit : 0x2b,\n            output.analog\n                ? Math.trunc((state.val as number) * 10 ** this.dataTypes[output.unit].decimal)\n                : state.val\n                  ? 1\n                  : 0,\n        );\n        if (success) {\n            void this.setState(id, state.val, success);\n        }\n    }\n\n    private coeReceived(msg: Buffer, rinfo: socket.RemoteInfo): void {\n        this.lastSent = Date.now();\n        this.log.debug(`received ${msg.toString('hex')} from ${rinfo.address}`);\n        void this.handlePacket(msg);\n    }\n\n    private onUnload(callback: () => void): void {\n        try {\n            if (this.sendInterval) {\n                this.clearInterval(this.sendInterval);\n            }\n            this.sock.close();\n            this.unsubscribeStates('*');\n\n            callback();\n        } catch {\n            callback();\n        }\n    }\n\n    private outputFromId(id: string): Output | null {\n        return this.outputs.find(output => id.endsWith(output.nodePath!)) || null;\n    }\n\n    private inputFromId(id: string): Output | null {\n        return this.inputs.find(input => id.endsWith(input.nodePath!)) || null;\n    }\n\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            if (state.ack) {\n                return;\n            }\n            const output = this.outputFromId(id);\n            if (output == null) {\n                return;\n            }\n\n            this.sendState(output, id, state);\n        }\n    }\n\n    // data types from https://fci.ta.co.at/docu/developer\n    private dataTypes: { [id: number]: DataType } = {\n        0: { symbol: '', name: 'Dimensionless', decimal: 0 },\n        1: { symbol: '\u00B0C', name: 'Temperature \u00B0C', decimal: 1 },\n        2: { symbol: 'W/m\u00B2', name: 'Solar radiation', decimal: 0 },\n        3: { symbol: 'l/h', name: 'Flow rate l/h', decimal: 0 },\n        4: { symbol: 's', name: 'Seconds', decimal: 0 },\n        5: { symbol: 'min', name: 'Minutes', decimal: 0 },\n        8: { symbol: '%', name: 'Percent', decimal: 1 },\n        10: { symbol: 'kW', name: 'Output kW', decimal: 2 },\n        11: { symbol: 'kWh', name: 'Energy kWh', decimal: 1 },\n        12: { symbol: 'MWh', name: 'Energy MWh', decimal: 0 },\n        13: { symbol: 'V', name: 'Voltage', decimal: 2 },\n        14: { symbol: 'mA', name: 'Amperage mA', decimal: 1 },\n        15: { symbol: 'hr', name: 'Hours', decimal: 0 },\n        16: { symbol: 'days', name: 'Days', decimal: 0 },\n        17: { symbol: 'pulses', name: 'Number of pulses', decimal: 0 },\n        18: { symbol: 'k\u2126', name: 'Resistance', decimal: 2 },\n        19: { symbol: 'l', name: 'Litres', decimal: 0 },\n        20: { symbol: 'km/h', name: 'Speed km/h', decimal: 0 },\n        21: { symbol: 'Hz', name: 'Frequency', decimal: 2 },\n        22: { symbol: 'l/min', name: 'Flow rate l/min', decimal: 0 },\n        23: { symbol: 'bar', name: 'Pressure bar', decimal: 2 },\n        24: { symbol: '', name: 'Performance factor | Dimesionless (.2)', decimal: 2 },\n        26: { symbol: 'm', name: 'Length m', decimal: 1 },\n        27: { symbol: 'mm', name: 'Length mm', decimal: 1 },\n        28: { symbol: 'm\u00B3', name: 'Cubic metres', decimal: 0 },\n        35: { symbol: 'l/d', name: 'Flow rate l/d', decimal: 0 },\n        36: { symbol: 'm/s', name: 'Speed m/s', decimal: 0 },\n        37: { symbol: 'm\u00B3/min', name: 'Flow rate m\u00B3/min', decimal: 0 },\n        38: { symbol: 'm\u00B3/h', name: 'Flow rate m\u00B3/h', decimal: 0 },\n        39: { symbol: 'm\u00B3/d', name: 'Flow rate m\u00B3/d', decimal: 0 },\n        50: { symbol: '\u20AC', name: 'Euro', decimal: 2 },\n        51: { symbol: '$', name: 'Dollar', decimal: 2 },\n        52: { symbol: 'g/m\u00B3', name: 'Absolute humidity', decimal: 1 },\n        53: { symbol: '', name: 'Dimensionless (.5)', decimal: 5 },\n        54: { symbol: '\u00B0', name: 'Degree (angle)', decimal: 1 },\n        58: { symbol: '', name: 'Dimensionless (.1)', decimal: 1 },\n        60: { symbol: '', name: 'Time in minutes', decimal: 0 },\n        63: { symbol: 'A', name: 'Amperage', decimal: 1 },\n        65: { symbol: 'mbar', name: 'Pressure mbar', decimal: 1 },\n        66: { symbol: 'Pa', name: 'Pressure Pa', decimal: 0 },\n        67: { symbol: 'ppm', name: 'CO2 content (ppm)', decimal: 0 },\n        69: { symbol: 'W', name: 'Output W', decimal: 0 },\n        70: { symbol: 't', name: 'Weight t', decimal: 2 },\n        71: { symbol: 'kg', name: 'Weight kg', decimal: 1 },\n        72: { symbol: 'g', name: 'Weight g', decimal: 1 },\n        73: { symbol: 'cm', name: 'Length cm', decimal: 1 },\n        76: { symbol: 'Bq/m\u00B3', name: 'Radon concentration', decimal: 0 },\n        77: { symbol: 'ct/kWh', name: 'Price ct/kWh', decimal: 3 },\n    };\n\n    private async handlePacket(packet: Buffer): Promise<void> {\n        if (packet.readUint8() != 2) {\n            this.log.warn(`invalid packet received. Cannot handle: ${packet.toString('hex')}`);\n            return;\n        }\n\n        const length = packet.readUInt8(2);\n        const messageCount = packet.readUint8(3);\n\n        if (length != 4 + messageCount * 8) {\n            this.log.warn(`invalid packet received. Cannot handle: ${packet.toString('hex')}`);\n            return;\n        }\n\n        for (let i = 0; i < messageCount; i++) {\n            const nodeID = packet.readUint8(8 * i + 4);\n            const outID = packet.readUint8(8 * i + 5) + 1;\n            const digital: boolean = packet.readUint8(8 * i + 6) == 0;\n            const dataType = packet.readUint8(8 * i + 7);\n            const data = packet.readInt32LE(8 * i + 8);\n\n            let typ = '(unknown)';\n            if (dataType in this.dataTypes) {\n                typ = this.dataTypes[dataType].name;\n            }\n\n            this.log.debug(`received data from node ${nodeID}/${outID}: ${data} ${typ}`);\n\n            if (!this.isInputCreated(nodeID, digital, outID)) {\n                this.log.warn(`Received from ${nodeID}/${digital ? 'd' : 'a'}${outID}, but there is no input created`);\n                continue;\n            }\n\n            const input = this.inputs.find(i => i.node == nodeID && i.analog == !digital && i.output == outID)!;\n\n            if (input.unit != dataType && input.analog) {\n                this.log.warn(\n                    `${input.node}/a${input.output} has wrong unit (received \"${typ}\" but input is configured as \"${this.dataTypes[input.unit].name}\")`,\n                );\n            }\n\n            const id = input.nodePath!;\n            await this.setState(\n                id,\n                digital ? (data == 1 ? true : false) : data / 10 ** this.dataTypes[input.unit].decimal,\n                true,\n            );\n        }\n    }\n\n    private isInputCreated(nodeID: number, digital: boolean, outID: number): boolean {\n        return this.inputs.some(i => i.node == nodeID && i.analog == !digital && i.output == outID);\n    }\n\n    private send(nodeID: number, outID: number, dataType: number, data: number): boolean {\n        if (this.cmiIP == '') {\n            return false;\n        }\n        if (nodeID > 255 || nodeID < 0) {\n            this.log.warn(`NodeID has to be between 0 and 255 (got ${nodeID})!`);\n            return false;\n        }\n        if (outID <= 0) {\n            this.log.warn(`Output ID has to be greater than 0 (got ${outID})!`);\n            return false;\n        }\n        const array = new Uint8Array(8);\n        array[0] = 2;\n        array[1] = 0;\n        array[2] = 12;\n        array[3] = 1;\n        array[4] = nodeID;\n        array[5] = outID - 1;\n        array[6] = dataType == 0x2b ? 0 : 1;\n        array[7] = dataType;\n\n        const buffer = Buffer.alloc(12);\n        buffer.fill(array);\n\n        // convert negative numbers and short to 4 bytes\n        data = data >>> 0;\n\n        buffer.writeUint32LE(data, 8);\n\n        this.log.debug(`sending ${buffer.toString('hex')} to ${this.cmiIP}:${this.config.cmiPort}`);\n        this.sock.send(buffer, this.config.cmiPort, this.cmiIP, err => {\n            if (err != null) {\n                this.log.error(`error sending: ${err}`);\n            }\n        });\n        return true;\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Cmicoe(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Cmicoe())();\n}\n"],
  "mappings": "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",
  "names": ["socket", "i"]
}
